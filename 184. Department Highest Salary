**** Medium ****
-- The Employee table holds all employees. Every employee has an Id, a salary, and there is also a column for the department Id.
+----+-------+--------+--------------+
| Id | Name  | Salary | DepartmentId |
+----+-------+--------+--------------+
| 1  | Joe   | 70000  | 1            |
| 2  | Henry | 80000  | 2            |
| 3  | Sam   | 60000  | 2            |
| 4  | Max   | 90000  | 1            |
+----+-------+--------+--------------+
-- The Department table holds all departments of the company.
+----+----------+
| Id | Name     |
+----+----------+
| 1  | IT       |
| 2  | Sales    |
+----+----------+
-- Write a SQL query to find employees who have the highest salary in each of the departments. 
-- For the above tables, Max has the highest salary in the IT department and Henry has the highest salary in the Sales department.
+------------+----------+--------+
| Department | Employee | Salary |
+------------+----------+--------+
| IT         | Max      | 90000  |
| Sales      | Henry    | 80000  |
+------------+----------+--------+

/* ON is the more general of the two. One can join tables ON a column, a set of columns and even a condition. 
   USING is useful when both tables share a column of the exact same name on which they join.  */

SELECT d.Name AS Department,e.Name AS Employee,t.Salary

FROM Employee e

INNER JOIN (SELECT DepartmentId,MAX(Salary) AS Salary FROM Employee GROUP BY DepartmentId) t
USING(DepartmentId,Salary)

INNER JOIN Department d
ON d.Id=t.DepartmentId;




